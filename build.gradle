import static org.gradle.api.JavaVersion.VERSION_11
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME') ?: System.getProperty('corda.artifactory.username')
        cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD') ?: System.getProperty('corda.artifactory.password')
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "$artifactoryContextUrl/corda-dev" }
        maven { url "$artifactoryContextUrl/corda-releases" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "net.corda.plugins:cordapp-cpk:$corda_gradle_plugins_version"
    }
}

plugins {
    id 'jacoco'
    id "com.jfrog.artifactory" version "$jfrogArtifactoryPluginVersion"
    id 'io.gitlab.arturbosch.detekt' version "$detektVersion"
    id 'java'
}

subprojects {
    if (System.getenv("RELEASE_VERSION")?.trim()) {
        version = System.getenv("RELEASE_VERSION")
    } else {
        def versionSuffix = System.getenv('VERSION_SUFFIX') ?: "0-SNAPSHOT"
        version = "$confidential_id_release_version-$versionSuffix"
    }
    group "$confidential_id_release_group"

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "$artifactoryContextUrl/corda-lib" }
        maven { url "$artifactoryContextUrl/corda-lib-dev" }
        maven { url "$artifactoryContextUrl/corda-releases" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
        maven { url "$artifactoryContextUrl/corda-dependencies" }
        //needed for C5 binaries
        maven {
            url = "$artifactoryContextUrl/corda-os-maven-stable-local"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }
    }

    java {
        sourceCompatibility = VERSION_11
        targetCompatibility = VERSION_11
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            allWarningsAsErrors = true
            languageVersion = "1.4"
            apiVersion = "1.4"
            jvmTarget = VERSION_11
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                    "-Xjvm-default=all",
                    // Prevent Kotlin from warning about kotlin.* classes inside the OSGi bundle.
                    "-Xskip-runtime-version-check",
                    "-java-parameters"
            ]
        }
    }

    tasks.withType(Jar) {
        jar {
            // This makes the JAR's SHA-256 hash repeatable.
            preserveFileTimestamps = false
            reproducibleFileOrder = true
        }
    }
}
tasks.register('compileAll') { task ->
    description = "Compiles all the Kotlin and Java classes, including all of the test classes."
    group = "verification"

    task.dependsOn tasks.withType(AbstractCompile)
}


def publishProjects = [project(":ci-workflows")]

configure(publishProjects) { subproject ->
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task install(dependsOn: 'publishToMavenLocal')

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java

                groupId subproject.group
                artifactId subproject.jar.baseName
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom {
                    description = subproject.description
                }
            }
        }
    }
}

artifactory {
    publish {
        contextUrl = 'https://software.r3.com/artifactory'
        repository {
            repoKey = System.getenv('CORDA_PUBLISH_REPOSITORY_KEY') ?: 'corda-lib-dev'
            username = cordaArtifactoryUsername
            password = cordaArtifactoryPassword
        }

        defaults {
            if (publishProjects.contains(project)) {
                publications(project.name)
            }
        }
    }
}

wrapper {
    gradleVersion = "6.8.3"
    distributionType = Wrapper.DistributionType.ALL
}