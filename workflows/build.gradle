plugins {
    id 'net.corda.plugins.cordapp-cpk'
    id 'org.jetbrains.kotlin.jvm'
    id 'jacoco'
    id 'com.r3.internal.gradle.plugins.r3Publish'
}

description = "Confidential Identities Workflows"

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()

    workflow {
        name = 'Confidential Identities Workflows'
        versionId = 2
        licence = 'Apache License, Version 2.0'
        vendor = 'Corda Open Source'
    }
}

tasks.named('jar', Jar) {
    archiveBaseName = "ci-workflows"
}

sourceSets {
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    // Corda dependencies.
    cordaProvided "$corda_release_group:corda-application:$corda_release_version"
    cordaProvided "$corda_release_group:corda-ledger:$corda_release_version"
    cordaProvided "$corda_release_group:corda-crypto-api:$corda_release_version"

    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    reports { junitXml.setEnabled(true) }
}
