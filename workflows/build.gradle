plugins {
    id 'net.corda.plugins.cordapp-cpk'
}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()

    signing {
        enabled = false
    }
    workflow {
        name = 'Confidential Identities Workflows'
        versionId = 1
        licence = 'Apache License, Version 2.0'
        vendor = 'Corda Open Source'
    }
}

jar.baseName = "ci-workflows"

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaProvided "$corda_release_group:corda-application:$corda_release_version"
    cordaProvided "$corda_release_group:corda-ledger:$corda_release_version"
    cordaProvided "$corda_release_group:corda-crypto-api:$corda_release_version"
    testCompile "$corda_release_group:corda-node-driver:$legacy_corda_release_version"

    testCompile "$tokens_release_group:tokens-contracts:$tokens_sdk_version"
    testCompile "$tokens_release_group:tokens-workflows:$tokens_sdk_version"
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}